name: Coverage

on:
  # Run on main branch pushes and completed CI runs
  push:
    branches:
      - main
  workflow_run:
    workflows:
      - CI
    branches:
      - main
    types:
      - completed

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize coverage builds
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C instrument-coverage"

jobs:
  coverage:
    runs-on: ubuntu-latest
    # Only run if CI passed or on direct push to main
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    strategy:
      matrix:
        feature: [sync, async]
    name: Coverage ${{ matrix.feature }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Use optimized Rust caching
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-${{ matrix.feature }}
          cache-on-failure: true

      # Install tarpaulin with caching
      - name: Install tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      # Run coverage with optimized settings
      - name: Generate coverage
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo tarpaulin \
              --engine llvm \
              --timeout 300 \
              --out xml \
              --output-dir target/coverage/ \
              --skip-clean \
              -- --test-threads 1
          else
            cargo tarpaulin \
              --engine llvm \
              --timeout 300 \
              --no-default-features --features async \
              --out xml \
              --output-dir target/coverage/ \
              --skip-clean \
              -- --test-threads 1
          fi

      # Upload to Coveralls with better error handling
      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          file: target/coverage/cobertura.xml
          format: cobertura
          flag-name: ${{ matrix.feature }}
          parallel: true
          allow-empty: true

  # Finalize coverage upload
  coverage-finish:
    needs: coverage
    if: always()
    runs-on: ubuntu-latest
    name: Coverage complete
    
    steps:
      - name: Coveralls finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
          carryforward: "sync,async"
